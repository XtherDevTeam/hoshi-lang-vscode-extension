{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Hoshi",
  "scopeName": "source.hoshi",
  "patterns": [
    { "include": "#comments" },
    { "include": "#keywords" },
    { "include": "#strings" },
    { "include": "#constants" },
    { "include": "#operators" },
    { "include": "#punctuation" },
    { "include": "#entities" },
    { "include": "#variables" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        { "name": "comment.line.double-slash.hoshi", "match": "//.*" },
        { "name": "comment.block.hoshi", "begin": "/\\*", "end": "\\*/" }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.hoshi",
          "match": "\\b(use|func|interface|struct|impl|let|in|for|forEach|while|if|elif|else|return|continue|break|cast|constructor|import|export|as|from|try|catch|finally|throw|type_id|dyn_cast|noffi|always_inline|new|interfaceof|static|operator|callable|alias|finalizer)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        { "name": "string.quoted.double.hoshi", "begin": "\"", "end": "\"", "patterns": [{ "name": "constant.character.escape.hoshi", "match": "\\\\." }] },
        { "name": "string.quoted.single.hoshi", "begin": "'", "end": "'", "patterns": [{ "name": "constant.character.escape.hoshi", "match": "\\\\." }] }
      ]
    },
    "constants": {
      "patterns": [
        { "name": "constant.language.hoshi", "match": "\\b(true|false|null)\\b" },
        { "name": "constant.numeric.decimal.hoshi", "match": "\\b[0-9]+\\.[0-9]+\\b" },
        { "name": "constant.numeric.integer.hoshi", "match": "\\b(0b[01]+|0o[0-7]+|0x[0-9a-fA-F]+|[0-9]+(u|U|l|L)?)\\b" },
        { "name": "constant.elipsis.hoshi", "match": "\\.\\.\\." }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.hoshi",
          "match": ":=|\\+=|-=|\\*=|/=|%=|&=|\\|=|\\^=|="
        },
        {
          "name": "keyword.operator.logical.hoshi",
          "match": "&&|\\|\\||!"
        },
        {
          "name": "keyword.operator.abstract.hoshi",
          "match": "interfaceof|impl"
        },
        {
          "name": "keyword.operator.comparison.hoshi",
          "match": "==|!=|<=|>=|<|>"
        },
        {
          "name": "keyword.operator.arithmetic.hoshi",
          "match": "\\+\\+|--|\\+|-|\\*|/|%"
        },
        {
          "name": "keyword.operator.bitwise.hoshi",
          "match": "&|\\||\\^|~|<<|>>"
        }
      ]
    },
    "punctuation": {
        "patterns": [
            {
                "name": "punctuation.terminator.statement.hoshi",
                "match": ";"
            },
            {
                "name": "punctuation.separator.namespace.hoshi",
                "match": ":"
            },
            {
                "name": "punctuation.separator.comma.hoshi",
                "match": ","
            },
            {
                "name": "punctuation.accessor.hoshi",
                "match": "\\."
            }
        ]
    },
    "entities": {
      "patterns": [
        {
          "name": "entity.name.function.hoshi",
          "match": "(?<=(func|constructor)\\s+)[a-zA-Z_][a-zA-Z0-9_]*"
        },
        {
          "name": "entity.name.type_alias.hoshi",
          "match": "(?<=(alias)\\s+)[a-zA-Z_][a-zA-Z0-9_]*"
        },
        {
          "name": "entity.name.invocation.hoshi",
          "match": "[a-zA-Z_][a-zA-Z0-9_]*(?=\\()"
        },
        {
          "name": "entity.name.type.struct.hoshi",
          "match": "(?<=struct\\s+)[a-zA-Z_][a-zA-Z0-9_]*"
        },
        {
          "name": "entity.name.type.interface.hoshi",
          "match": "(?<=interface\\s+)[a-zA-Z_][a-zA-Z0-9_]*"
        },
        {
          "name": "entity.name.tag.template.hoshi",
          "begin": "<",
          "end": ">",
          "patterns": [{ "include": "#keywords" }, { "include": "#variables" }]
        },
        {
          "name": "entity.name.after.colon.hoshi",
          "match": "(?<=:\\s+)[a-zA-Z_][a-zA-Z0-9_]*"
        },
        {
          "name": "entity.name.type.impl.hoshi",
          "match": "(?<=(impl|interfaceof)\\s+)[a-zA-Z_][a-zA-Z0-9_]*"
        },
        {
          "name": "entity.name.dynamic.array.initializer.hoshi",
          "match": "(?<=new\\s+)[a-zA-Z_][a-zA-Z0-9_\\.]*(?=\\[)"
        }
      ]
    },
    "variables": {
      "patterns": [
        { "name": "variable.language.this.hoshi", "match": "\\bthis\\b" },
        { "name": "variable.other.hoshi", "match": "[a-zA-Z_][a-zA-Z0-9_]*" }
      ]
    }
  }
}